{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","item","activeClassName","active","to","id","name","Message","msg","message","schema","Yup","shape","postMessage","required","DialogsForm","initialValues","validationSchema","onSubmit","values","resetForm","onAddMessage","isSubmitting","errors","touched","type","inputError","as","component","disabled","Dialogs","state","dialogsPage","dialogsItems","dialogs","map","d","i","messagesItems","messages","m","addMessage","compose","connect","dispatch","addMessagePostActionCreator","withAuthRedirect"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,WAAa,4BAA4B,aAAe,8BAA8B,KAAO,sBAAsB,OAAS,wBAAwB,SAAW,0BAA0B,IAAM,uB,2GCK9OC,EAAa,SAACC,GAClB,OACE,qBAAKC,UAAWC,IAAEC,KAAlB,SACE,cAAC,IAAD,CAASC,gBAAiBF,IAAEG,OAAQC,GAAI,YAAcN,EAAMO,GAA5D,SAAiEP,EAAMQ,UAKvEC,EAAU,SAACT,GACf,OACE,qBAAKC,UAAWC,IAAEQ,IAAlB,SAAwBV,EAAMW,WAI5BC,EAASC,MAAaC,MAAM,CAChCC,YAAaF,MAAaG,SAAS,8IAG/BC,EAAc,SAACjB,GACnB,OACE,mCACE,cAAC,IAAD,CACEkB,cAAe,CAAEH,YAAa,IAE9BI,iBAAkBP,EAElBQ,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBtB,EAAMuB,aAAaF,EAAON,aAC1BO,KAPJ,SAUG,gBAAGE,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,OAAO1B,UAAWwB,EAAOV,aAAeW,EAAQX,YAAcb,IAAE0B,WAAa,GAAKpB,KAAK,cAAcqB,GAAG,aACpH,cAAC,IAAD,CAAcrB,KAAK,cAAcsB,UAAU,QAC3C,wBAAQH,KAAK,SAASI,SAAUP,EAAhC,oIAwCGQ,EA7BC,SAAChC,GAEf,IAAIiC,EAAQjC,EAAMkC,YAMZC,EAAeF,EAAMG,QACxBC,KAAI,SAACC,EAAGC,GAAJ,OAAU,cAAC,EAAD,CAAoB/B,KAAM8B,EAAE9B,KAAMD,GAAI+B,EAAE/B,IAAvBgC,MAE5BC,EAAgBP,EAAMQ,SACzBJ,KAAI,SAACK,EAAGH,GAAJ,OAAU,cAAC,EAAD,CAAiB5B,QAAS+B,EAAE/B,SAAd4B,MAG/B,OACE,sBAAKtC,UAAWC,IAAEkC,QAAlB,UACE,qBAAKnC,UAAWC,IAAEiC,aAAlB,SACGA,IAEH,sBAAKlC,UAAWC,IAAEuC,SAAlB,UACGD,EAED,cAAC,EAAD,CAAajB,aAnBE,SAACR,GACpBf,EAAM2C,WAAW5B,a,yBC5BN6B,sBACbC,aAvBsB,SAACZ,GACvB,MAAO,CACLC,YAAaD,EAAMC,gBAGI,SAACY,GAC1B,MAAO,CACLH,WAAY,SAAC5B,GAAkB+B,EAASC,YAA4BhC,SAiBtEiC,IAFaJ,CAGbZ","file":"static/js/3.6d282a90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__njw7f\",\"inputError\":\"Dialogs_inputError__3c1vj\",\"dialogsItems\":\"Dialogs_dialogsItems__2hTm9\",\"item\":\"Dialogs_item__NBFcD\",\"active\":\"Dialogs_active__w6lpn\",\"messages\":\"Dialogs_messages__3rZBr\",\"msg\":\"Dialogs_msg__12-_3\"};","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from \"yup\";\r\n\r\nconst DialogItem = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <NavLink activeClassName={s.active} to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={s.msg}>{props.message}</div>\r\n  )\r\n}\r\n\r\nconst schema = Yup.object().shape({\r\n  postMessage: Yup.string().required('Поле не должно быть пустым')\r\n})\r\n\r\nconst DialogsForm = (props) => {\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{ postMessage: ''}}\r\n\r\n        validationSchema={schema}\r\n\r\n        onSubmit={(values, { resetForm }) => {\r\n          props.onAddMessage(values.postMessage)\r\n          resetForm()\r\n        }}\r\n      >\r\n        {({ isSubmitting, errors, touched }) => (\r\n          <Form>\r\n            <Field type=\"text\" className={errors.postMessage && touched.postMessage ? s.inputError : '' } name=\"postMessage\" as=\"textarea\" />\r\n            <ErrorMessage name=\"postMessage\" component=\"div\" />\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Отправить сообщение\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nconst Dialogs = (props) => {\r\n\r\n  let state = props.dialogsPage\r\n\r\n  const onAddMessage = (postMessage) => {\r\n    props.addMessage(postMessage)\r\n  }\r\n\r\n  const dialogsItems = state.dialogs\r\n    .map((d, i) => <DialogItem key={i} name={d.name} id={d.id} />)\r\n\r\n  const messagesItems = state.messages\r\n    .map((m, i) => <Message key={i} message={m.message} />)\r\n\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsItems}\r\n      </div>\r\n      <div className={s.messages}>\r\n        {messagesItems}\r\n\r\n        <DialogsForm onAddMessage={onAddMessage} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dialogs","import React from 'react'\r\nimport {addMessagePostActionCreator} from \"../../redux/dialogs.reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state) => { // Передаем все что свзяано со стейтом\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => { // Передаем диспатчи\r\n  return {\r\n    addMessage: (postMessage) => { dispatch(addMessagePostActionCreator(postMessage)) },\r\n  }\r\n}\r\n/* Первый вызов - это передача в аттрибутах, тоже самое что:\r\n<Dialogs\r\n  dialogsPage={state}\r\n  addMessage={addMessage}\r\n  changeMessage={changeMessage} />)\r\n\r\n  Второй вызов - это jsx компонент\r\n */\r\n\r\n\r\n// Compose - передаем обертки и саму компоненту, compose сам все обернет\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}